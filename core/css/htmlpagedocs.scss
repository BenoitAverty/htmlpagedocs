/* Main CSS sheet of HTMLpageDocs. */

// Global variables
$page-width: 210mm;
$page-height: 297mm;
$page-margin: 20mm;

// Colors
$main-text-color: black;
$secondary-text-color: #333;

// font
$main-font-size: 11pt;

/**
 * General info
 */
* {
  font-size: $main-font-size;
}

/**
 * DEFAULT PAGE INFORMATION 
 */
@page { 
  size: $page-width $page-height;
  margin: $page-margin;
}

/* Allow html do define precisely a page. */
.page {
  width: $page-width - 2*$page-margin;
  height: $page-height - 2*$page-margin;
  margin: 0;
  padding: 0;
  page-break-inside: avoid;
  page-break-before: always;
  page-break-after: always;
}

/**
 * SPECIAL PAGES
 */

/* Landscape page */
.landscape { 
  page: landscape;
}

@page landscape { 
  size: $page-height $page-width landscape;
  margin: $page-margin;
}

/* Frontpage */
.frontpage { 
  @extend .page;
  page: frontpage;
  margin: 0;
  padding: 0;
}

@page frontpage {
  //nothing yet...
}

/** 
 * HEADING HIERARCHY
 * This defines the heading hierarchy when no theme is used, and styling associated. Default hierarchy is:
 * h1 = Title of the document. There should be only one in the document, usually in the first page (frontpage).
 * h2 = Part.
 * h3 = Section. Will always start on its own page.
 * h4 = Subsection.
 * h5 = Subsubsection.
 * h6 = Paragraph
 */
h1 {
  font-size: 2.4em;
  color: $main-text-color;
  text-align: center;
  border-bottom: 2pt solid black;

  .subtitle {
    font-size: 0.9em;
  }
}

/* At each heading, increment counter for this heading and reset all counters for lower heading levels. */
@for $i from 2 through 6 {
  h#{$i} { 

    counter-increment: h#{$i}-counter;

    $counters-to-reset: null;
    @for $j from 6 to $i {
      $counters-to-reset: $counters-to-reset h#{$j}-counter;
    }
    @if($counters-to-reset) {
      counter-reset: $counters-to-reset;
    }
  }
}

h2, h3, h4, h5 {
  font-variant: small-caps;
}

h2 {

  font-size: 1.6em;
  border-bottom: 1pt solid $main-text-color;

  &:before {
    content: 'Part ' counter(h2-counter) '. ';
  }
}

h3 {
  font-size: 1.4em;

  &:before {
    content: counter(h2-counter) '.' counter(h3-counter) '. ';
  }
}

h4 {
  font-size: 1.3em;

  &:before {
    content: counter(h2-counter) '.' counter(h3-counter) '.' counter(h4-counter) '. ';
  }
}

h5 {
  font-size: 1.2em;

  &:before {
    content: counter(h2-counter) '.' counter(h3-counter) '.' counter(h4-counter) '.' counter(h5-counter) '. ';
  }
}

h6 {
  font-size: 1em;
  font-weight: bold;
  margin-bottom: 2pt;

  &:before {
    content: counter(h2-counter) '.' counter(h3-counter) '.' counter(h4-counter) '.' counter(h5-counter) '.' counter(h6-counter) '. ';
  }
}

/** 
 * HEADER / FOOTER
 * The headers/footers do not change for right/left pages by default.
 */

h2 {
  string-set: part-title content();
}

h3 {
  string-set: section-title content();
}

@page {
  @top-left {
    font-size: 0.8em;
    content: string(part-title);
  }

  @top-right {
    font-size: 0.8em;
    content: string(section-title);
  }

  @bottom-center {
    content: 'Page ' counter(page);
  }
}

@page:first {
  @top-left {
    content: none;
  }

  @top-right {
    content: none;
  }

  @bottom-center {
    content: none;
  }
}

@page landscape {
  @top-left {
    content: none;
  }

  @top-right {
    content: none;
  }

  @bottom-center {
    content: none;
  }
}

/**
 * REFERENCES
 */
a.reference {
  string-set: h2-target-counter target-counter(attr(href), h2-counter)
      h3-target-counter target-counter(attr(href), h3-counter)
      h4-target-counter target-counter(attr(href), h4-counter)
      h5-target-counter target-counter(attr(href), h5-counter)
      h6-target-counter target-counter(attr(href), h6-counter)
      target-title target-content(attr(href)) //WARNING this works in princeXML, but the function in CSS spec is target-text. Not sure what to do about this...
  ;

  .ref-part:before {
    content: string(h2-target-counter);
  }
  .ref-section:before {
    content: string(h2-target-counter) '.' string(h3-target-counter);
  }
  .ref-subsection:before {
    content: string(h2-target-counter) '.' string(h3-target-counter) '.' string(h4-target-counter);
  }
  .ref-subsubsection:before {
    content: string(h2-target-counter) '.' string(h3-target-counter) '.' string(h4-target-counter) '.' string(h5-target-counter);
  }
  .ref-paragraph:before {
    content: string(h2-target-counter) '.' string(h3-target-counter) '.' string(h4-target-counter) '.' string(h5-target-counter) '.' string(h6-target-counter);
  }
  .ref-content:before {
    content: string(target-title);
  }
}


// .image-full {
//   width: 100%;
//   height: 100%;
// }

// h1, h2, h3, h4, h5 {
//   font-weight: bold;
//   page-break-after: avoid;
//   page-break-inside:avoid;
// }

// h1+p, h2+p, h3+p {
//   page-break-before: avoid;
// }

// table, figure {
//   page-break-inside: avoid;
// }



/**
 * Footnotes 
 */
@page {
  @footnotes {
    border-top: 0.6pt solid black;
    padding-top: 8pt;
  }
}

.footnote {
  float: footnote;
  counter-increment: footnote;
  &::footnote-call {
    content: counter(footnote);
    font-size: 9pt;
    vertical-align: super;
    line-height: none;
  }

  &::footnote-marker {
    font-weight: bold;
  }
}

/**
 * Table of content 
 */
ul.toc a {
  text-decoration: none;
  color: black;
  span {
    text-decoration: underline;
    color: blue;
  }

  &:after {
    content: leader('.') target(attr(href), page);
  }
}